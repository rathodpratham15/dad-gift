openapi: 3.0.0
info:
  title: NEW DAD's GIFT 3
  version: 1.2.0
  description: API for managing users, properties, messages, analytics, and user-specific property views in a real estate application.

servers:
  - url: http://localhost:3002
    description: Local development server

paths:
  /api/auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: password123
              required:
                - name
                - email
                - password
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 648ae01f730e4f11c5ef48c8
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: user@example.com
                      role:
                        type: string
                        example: user
        400:
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User already exists
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server error

  /api/auth/login:
    post:
      summary: Login a user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: password123
              required:
                - email
                - password
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: JWT_TOKEN_HERE
                  role:
                    type: string
                    example: user
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 648ae01f730e4f11c5ef48c8
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: user@example.com
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid credentials

  /api/user/{id}:
    delete:
      summary: Delete a user (Admin only)
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 648ae01f730e4f11c5ef48c8
      responses:
        200:
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully
        403:
          description: Access denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: admin
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found

  /api/user/profile:
    get:
      summary: Fetch user profile
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 648ae01f730e4f11c5ef48c8
                  name:
                    type: string
                    example: John Doe
                  email:
                    type: string
                    example: user@example.com
                  role:
                    type: string
                    example: user
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
    put:
      summary: Update user profile
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe Updated
                email:
                  type: string
                  example: user.updated@example.com
      responses:
        200:
          description: User profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User profile updated successfully
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 648ae01f730e4f11c5ef48c8
                      name:
                        type: string
                        example: John Doe Updated
                      email:
                        type: string
                        example: user.updated@example.com
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid input
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized

  /api/user/favorites:
    get:
      summary: Fetch user favorite properties
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of favorite properties fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Property'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
    post:
      summary: Add a property to favorites
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                propertyId:
                  type: string
                  example: 648ae01f730e4f11c5ef48c7
              required:
                - propertyId
      responses:
        200:
          description: Property added to favorites
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Property added to favorites
        409:
          description: Property already in favorites
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Property is already in your favorites
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized

  /api/user/search-history:
    get:
      summary: Fetch user search history
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of user search history
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "New York Apartments"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized

  /api/properties:
    get:
      summary: Get all properties with pagination and filters
      tags:
        - Properties
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            example: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            example: 10
            default: 10
        - name: minPrice
          in: query
          schema:
            type: number
            example: 100000
        - name: maxPrice
          in: query
          schema:
            type: number
            example: 500000
        - name: query
          in: query
          schema:
            type: string
            example: "New York"
        - name: propertyType
          in: query
          schema:
            type: string
            example: "Apartment"
        - name: city
          in: query
          schema:
            type: string
            example: "New York"
      responses:
        200:
          description: List of properties
          content:
            application/json:
              schema:
                type: object
                properties:
                  properties:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                  total:
                    type: integer
                    example: 50
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server error
    post:
      summary: Add a new property (Admin only)
      tags:
        - Properties
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyInput'
      responses:
        201:
          description: Property added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Property added successfully
                  property:
                    $ref: '#/components/schemas/Property'
        400:
          description: Missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Missing required fields
        403:
          description: Access denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: admin
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server error

  /api/properties/upload:
    post:
      summary: Upload multiple images
      tags:
        - Properties
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
              required:
                - images
      responses:
        200:
          description: Images uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  filePaths:
                    type: array
                    items:
                      type: string
                      example: "/uploads/1698765432100-condo.jpg"
        400:
          description: No files uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No files uploaded
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server error during image upload

  /api/properties/{id}:
    get:
      summary: Get a single property by ID
      tags:
        - Properties
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 648ae01f730e4f11c5ef48c7
      responses:
        200:
          description: Property fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        400:
          description: Property ID is required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Property ID is required
        404:
          description: Property not found or missing coordinates
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Property not found or missing coordinates
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server error
    put:
      summary: Update a property (Admin only)
      tags:
        - Properties
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 648ae01f730e4f11c5ef48c7
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyInput'
      responses:
        200:
          description: Property updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Property updated successfully
                  property:
                    $ref: '#/components/schemas/Property'
        403:
          description: Access denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: admin
        404:
          description: Property not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Property not found
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server error
    delete:
      summary: Delete a property (Admin only)
      tags:
        - Properties
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 648ae01f730e4f11c5ef48c7
      responses:
        200:
          description: Property deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Property deleted successfully
        403:
          description: Access denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: admin
        404:
          description: Property not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Property not found
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server error

  /api/properties/{id}/similar:
    get:
      summary: Get similar properties by straight-line distance and price
      tags:
        - Properties
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 648ae01f730e4f11c5ef48c7
        - name: radius
          in: query
          schema:
            type: number
            example: 5
            default: 5
          description: Maximum straight-line distance in miles to search for similar properties
      responses:
        200:
          description: Similar properties fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  similarByLocation:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                    description: Properties within the specified straight-line distance
                  similarByPrice:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                    description: Properties within ±10% price range and specified straight-line distance
        400:
          description: Property is missing valid coordinates
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Property is missing valid coordinates
        404:
          description: Property not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Property not found
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server error

  /api/analytics:
    get:
      summary: Get analytics data (Admin only)
      tags:
        - Analytics
      security:
        - bearerAuth: []
      responses:
        200:
          description: Analytics data fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  propertyViews:
                    type: integer
                    example: 1200
                  userEngagement:
                    type: integer
                    example: 230
        403:
          description: Access denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: admin
    post:
      summary: Log property views
      tags:
        - Analytics
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                propertyId:
                  type: string
                  example: 648ae01f730e4f11c5ef48c7
                userId:
                  type: string
                  example: 648ae01f730e4f11c5ef48c8
              required:
                - propertyId
      responses:
        201:
          description: View logged successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: View logged successfully
        200:
          description: User has already viewed this property
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User has already viewed this property
        400:
          description: Property ID or User ID is missing
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Property ID or User ID is missing

  /api/user-views:
    get:
      summary: Fetch views for a specific user
      tags:
        - User Views
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
            example: 648ae01f730e4f11c5ef48c8
      responses:
        200:
          description: List of properties viewed by the user
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    propertyId:
                      type: string
                      example: 648ae01f730e4f11c5ef48c7
                    views:
                      type: integer
                      example: 1
        400:
          description: User ID is required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User ID is required
    post:
      summary: Log a user-specific view for a property
      tags:
        - User Views
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: 648ae01f730e4f11c5ef48c8
                propertyId:
                  type: string
                  example: 648ae01f730e4f11c5ef48c7
              required:
                - userId
                - propertyId
      responses:
        201:
          description: User-specific view logged successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User-specific view logged successfully
        400:
          description: User ID or Property ID is missing
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User ID or Property ID is missing
        409:
          description: User has already viewed this property
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User has already viewed this property

  /api/chat:
    post:
      summary: Chat with the AI assistant
      tags:
        - Chatbot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Do you have 2BHKs in Bandra under ₹50K?"
              required:
                - message
      responses:
        200:
          description: AI response returned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  reply:
                    type: string
                    example: "Yes! We have several 2BHKs available in Bandra under ₹50K."
        400:
          description: Missing message input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Message is required.
        500:
          description: Chatbot server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Something went wrong with the chatbot.

  /api/messages:
    get:
      summary: Get all messages (Admin only)
      tags:
        - Messages
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of all messages
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: 648ae01f730e4f11c5ef48c9
                    name:
                      type: string
                      example: John Doe
                    email:
                      type: string
                      example: john.doe@example.com
                    message:
                      type: string
                      example: Hello, I’m interested in one of your properties.
                    timestamp:
                      type: string
                      format: date-time
                      example: 2023-06-15T10:00:00Z
        403:
          description: Access denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: admin
    post:
      summary: Create a new message
      tags:
        - Messages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  example: john.doe@example.com
                message:
                  type: string
                  example: Hello, I’m interested in one of your properties.
              required:
                - name
                - email
                - message
      responses:
        201:
          description: Message created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Message created successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 648ae01f730e4f11c5ef48c9
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: john.doe@example.com
                      message:
                        type: string
                        example: Hello, I’m interested in one of your properties.
                      timestamp:
                        type: string
                        format: date-time
                        example: 2023-06-15T10:00:00Z
        400:
          description: Missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Missing required fields

components:
  schemas:
    Property:
      type: object
      properties:
        _id:
          type: string
          example: 648ae01f730e4f11c5ef48c7
        title:
          type: string
          example: Modern Condo
        type:
          type: string
          example: Condo
        price:
          type: number
          example: 150000
        rentPerMonth:
          type: number
          example: 2000
          nullable: true
        location:
          type: string
          example: New York, NY
        coordinates:
          type: object
          properties:
            type:
              type: string
              enum: [Point]
              example: Point
            coordinates:
              type: array
              items:
                type: number
              example: [-73.935242, 40.730610] # [longitude, latitude]
              minItems: 2
              maxItems: 2
          required:
            - type
            - coordinates
        description:
          type: string
          example: A beautiful modern condo.
        images:
          type: array
          items:
            type: string
            example: /uploads/condo.jpg
        facilities:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: Gym
              value:
                type: string
                example: Available
              icon:
                type: string
                example: fa-dumbbell
                nullable: true
            required:
              - name
              - value
        views:
          type: number
          example: 10
      required:
        - _id
        - title
        - type
        - price
        - location
        - coordinates
        - images
    PropertyInput:
      type: object
      properties:
        title:
          type: string
          example: Modern Condo
        type:
          type: string
          example: Condo
        price:
          type: number
          example: 150000
        rentPerMonth:
          type: number
          example: 2000
          nullable: true
        location:
          type: string
          example: New York, NY
        coordinates:
          type: object
          properties:
            type:
              type: string
              enum: [Point]
              example: Point
            coordinates:
              type: array
              items:
                type: number
              example: [-73.935242, 40.730610]
              minItems: 2
              maxItems: 2
          required:
            - type
            - coordinates
        description:
          type: string
          example: A beautiful modern condo.
        images:
          type: array
          items:
            type: string
            example: /uploads/condo.jpg
        facilities:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: Gym
              value:
                type: string
                example: Available
              icon:
                type: string
                example: fa-dumbbell
                nullable: true
            required:
              - name
              - value
      required:
        - title
        - type
        - price
        - location
        - coordinates
        - images

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT